/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINEDITOR_H_EA17EABC__
#define __PLUGINEDITOR_H_EA17EABC__

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"
#include "AnalysisModel.h"
#include "GUI/PluginLookAndFeel.h"
#include "GUI/SimpleAnalysisComponent.h"
#include "GUI/FFTComponent.h"



//==============================================================================
/**
*/
class SoundAnalyserAudioProcessorEditor  : public AudioProcessorEditor, public Button::Listener, public Timer, public ValueTree::Listener, public Label::Listener {
public:
    SoundAnalyserAudioProcessorEditor (SoundAnalyserAudioProcessor* ownerFilter, ValueTree analyserTree_);
    ~SoundAnalyserAudioProcessorEditor();

    //==============================================================================
    // This is just a standard Juce paint method...
    void paint (Graphics& g);
    
    void resized();
    
    void setValueTree(ValueTree tree)
    {
        analyserTree.removeListener(this);
        
        analyserTree = tree;
        
        analyserTree.addListener(this);
        
        refreshFromTree();
    }
    
    void refreshFromTree()
    {
        analysisComponents.clear();
                
        for (int i = 0;i < analyserTree.getNumChildren();i++)
        {
            ValueTree analysisTree = analyserTree.getChild(i);
            
            addAnalysis(analysisTree);
        }
        
        analyserId.setText(analyserTree[AnalysisModel::Ids::AnalyserId],dontSendNotification);

        OSCPort.setText(analyserTree[AnalysisModel::Ids::Port],dontSendNotification);
        IPAddressValue.setText(analyserTree[AnalysisModel::Ids::IPAddress],dontSendNotification);
        
        resized();
    }
    
    void addAnalysis(ValueTree& analysisTree);
    
    void buttonClicked (Button* button);
    
    void timerCallback();
    
    void valueTreePropertyChanged (ValueTree& treeWhosePropertyHasChanged, const Identifier& property);
    void valueTreeChildAdded (ValueTree& parentTree, ValueTree& childWhichHasBeenAdded);
    void valueTreeChildRemoved (ValueTree& parentTree, ValueTree& childWhichHasBeenRemoved);
    void valueTreeChildOrderChanged (ValueTree& parentTreeWhoseChildrenHaveMoved);
    void valueTreeParentChanged (ValueTree& treeWhoseParentHasChanged);
    
    void labelTextChanged (Label* labelThatHasChanged)
    {
        if (labelThatHasChanged == &analyserId)
        {
            analyserTree.setProperty(AnalysisModel::Ids::AnalyserId, analyserId.getText(), nullptr);
        }
        else if (labelThatHasChanged == &OSCPort)
        {
            analyserTree.setProperty(AnalysisModel::Ids::Port, OSCPort.getText(),nullptr);
        }
        else if (labelThatHasChanged == &IPAddressValue)
        {
            analyserTree.setProperty(AnalysisModel::Ids::IPAddress, IPAddressValue.getText(),nullptr);
        }
        else if (labelThatHasChanged == &bufferSizeValue)
        {
            AnalysisModel::setBufferSize(analyserTree,bufferSizeValue.getTextValue().getValue());
        }
    }
    
    void textEditorTextChanged (TextEditor& textEditor)
    {

        analyserTree.setProperty(AnalysisModel::Ids::AnalyserId, textEditor.getText(), nullptr);

    }
    
    
private:
    
    SoundAnalyserAudioProcessor* getProcessor() const
    {
        return static_cast <SoundAnalyserAudioProcessor*> (getAudioProcessor());
    }
    
    ValueTree analyserTree;
    
    OwnedArray<Component> analysisComponents;
    
    TextButton newAnalysisButton;
    
    int plotX, plotY, plotHeight;
    
    Label analyserId;
    
    
    Label OSCPort;
    Label OSCPortText;
    
    Label IPAddressValue;
    Label IPAddressText;
    
    Label analyserIdText;
    
    
    Label bufferSizeText;
    Label bufferSizeValue;
    
    Label pluginTitleLabel;
    Label pluginVersionLabel;
    
    PluginLookAndFeel pluginLookAndFeel;
    
};


#endif  // __PLUGINEDITOR_H_EA17EABC__
