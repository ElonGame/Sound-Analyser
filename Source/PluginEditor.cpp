/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
SoundAnalyserAudioProcessorEditor::SoundAnalyserAudioProcessorEditor (SoundAnalyserAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter)
{
    // This is where our plugin's editor size is set.
    setSize (400, 300);
    
    // -------------------------------------------------
    // RMS
    setupAnalysisComponents(&sendRMSButton, &RMSLabel,"Root Mean Square (RMS)");
    
    // -------------------------------------------------
    // PEAK ENERGY
    setupAnalysisComponents(&sendPeakButton, &peakLabel,"Peak Energy");

    // LISTENERS
    sendRMSButton.addListener(this);
    sendPeakButton.addListener(this);
    
    
    startTimer (50);
}



//==============================================================================
SoundAnalyserAudioProcessorEditor::~SoundAnalyserAudioProcessorEditor()
{
}

//==============================================================================
void SoundAnalyserAudioProcessorEditor::setupAnalysisComponents(TextButton* button,Label* label,String labelText)
{
    label->setText(labelText, dontSendNotification);
    button->setColour(TextButton::ColourIds::buttonOnColourId, Colours::blueviolet);
    button->setColour(TextButton::ColourIds::buttonColourId, Colours::silver);
    button->setToggleState(false, dontSendNotification);

    addAndMakeVisible(button);
    addAndMakeVisible(label);
    
}

//==============================================================================
void SoundAnalyserAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::lightgrey);
    g.setColour (Colours::black);
    g.setFont (15.0f);
    //g.drawFittedText ("Hello World!", 0, 0, getWidth(), getHeight(), Justification::centred, 1);
    
   // g.drawLine(10, 10, getWidth()-10, getHeight()-10);
}

//==============================================================================
void SoundAnalyserAudioProcessorEditor::resized()
{
    int buttonSize = 20;
        
    RMSLabel.setBounds(10,10,200,20);
    sendRMSButton.setBounds(220, 10, buttonSize, buttonSize);
    
    peakLabel.setBounds(10, 35, 200, 20);
    sendPeakButton.setBounds(220, 35, buttonSize, buttonSize);
    
}

//==============================================================================
void SoundAnalyserAudioProcessorEditor::timerCallback()
{
    float RMSstate_f = getProcessor()->getParameter(getProcessor()->Parameters::pSendRMS);
    bool RMSstate = getProcessor()->floatToBoolean(RMSstate_f);
    sendRMSButton.setToggleState(RMSstate, dontSendNotification);
    
    float peakState_f = getProcessor()->getParameter(getProcessor()->Parameters::pSendPeak);
    bool peakState = getProcessor()->floatToBoolean(peakState_f);
    sendPeakButton.setToggleState(peakState, dontSendNotification);
}


//==============================================================================
void SoundAnalyserAudioProcessorEditor::buttonClicked (Button* button)
{
    // -----------------------------------------------
    if (button == &sendRMSButton)
    {
        // get button state
        bool state = sendRMSButton.getToggleState();
        
        
        
        // if it is on
        if (state == true)
        {            
            // set the boolean parameter to 0.0
            getProcessor()->setParameterNotifyingHost (SoundAnalyserAudioProcessor::pSendRMS,0.0);
        }
        else // if it is off
        {
            // set the boolean parameter to 1.0
            getProcessor()->setParameterNotifyingHost (SoundAnalyserAudioProcessor::pSendRMS,1.0);
        }
        
        sendRMSButton.setToggleState(!state, dontSendNotification);
   
    }
    
    // -----------------------------------------------
    if (button == &sendPeakButton)
    {
        // get button state
        bool state = sendPeakButton.getToggleState();
        
        // if it is on
        if (state == true)
        {
            // set the boolean parameter to 0.0
            getProcessor()->setParameterNotifyingHost (SoundAnalyserAudioProcessor::pSendPeak,0.0);
        }
        else
        {
            // set the boolean parameter to 1.0
            getProcessor()->setParameterNotifyingHost (SoundAnalyserAudioProcessor::pSendPeak,1.0);
        }
        
        sendPeakButton.setToggleState(!state, dontSendNotification);
        
    }
}
